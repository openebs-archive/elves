#Description: Verify the pods are scheduled on affinied nodes using CAS template
#Author: Swarna
########################################################################################################################################################################
#Steps:
#1.Check the maya-apiserver and openebs-provisioner are running
#2.Downlaod volume policy yaml and replace the replica count
#3.Download percona application, change the storage class name and deploy it.
#4.Check if the application and the volume pods are up and running.
#5.Check on which node replicas are running anf get the node names.
#6.Get the replica pod name
#7.Delete the replica pod
#8.check the replica re-scheduled again on the same node.
#9.Perform cleanup.
########################################################################################################################################################################


- hosts: localhost

  vars_files:
    - node-affinity-vars.yml

  tasks:
   - block:


       - include: pre-requisites.yml

       - name: Get the Number of nodes count
         shell: source ~/.profile; kubectl get nodes | grep 'Ready' | grep 'none' | wc -l
         args:
           executable: /bin/bash
         register: node_out
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Fetch the node count from stdout
         set_fact:
            node_count: " {{ node_out.stdout}}"

       - name: Check status of maya-apiserver
         include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_check.yml"
         vars:
           ns: openebs
           app: maya-apiserver

       - name: Download volume policy yaml
         get_url:
           url: https://raw.githubusercontent.com/openebs/openebs/master/k8s/openebs-volumepolicies.yaml
           dest: "{{ result_kube_home.stdout }}"
           force: yes
         register: result
         until:  "'OK' in result.msg"
         delay: 5
         retries: 3
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Replace the replica count volume-policies yaml
         replace:
           path: openebs-volumepolicies.yaml
           regexp: 'value: "2"'
           replace: 'value: "{{ (node_count) |int-1 }}"'
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Deploy Volume policy yaml
         shell: source ~/.profile; kubectl apply -f openebs-volumepolicies.yaml
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"


       - name: Create namespace to deploy application
         shell: source ~/.profile; kubectl create ns {{ namespace }}
         args:
           executable: /bin/bash
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Download Percona yaml
         get_url:
           url: https://raw.githubusercontent.com/Swarnalatha-K/openebs/5bb789fe75cac59b48f91d39806ac4be1e290704/k8s/demo/percona/percona-openebs-deployment.yaml
           dest: "{{ result_kube_home.stdout }}"
           force: yes
         register: result
         until:  "'OK' in result.msg"
         delay: 5
         retries: 3
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"


       - name: Replace the storage class name in percona yaml
         replace:
           path: percona-openebs-deployment.yaml
           regexp: 'storageClassName: openebs-percona'
           replace: 'storageClassName: openebs-standard-0.6.0'
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Deploy percona application
         shell: source ~/.profile; kubectl apply -f percona-openebs-deployment.yaml -n {{ namespace }}
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Check percona pod is running
         include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_check.yml"
         vars:
           ns: "{{namespace}}"
           app: percona


       - name: Check if the replica pods are created and running
         shell: source ~/.profile; kubectl get pods -n {{ namespace }} | grep rep | grep -i running |wc -l
         args:
           executable: /bin/bash
         register: rep_count
         until: "'2' in rep_count.stdout"
         delay: 60
         retries: 5
         ignore_errors: true
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"


       - name: Get PV name
         shell: source ~/.profile; kubectl get pv -n {{ namespace }}| grep openebs-standard-0.6.0 | awk '{print $1}'
         args:
           executable: /bin/bash
         register: pv_name
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"


       - name: Get the node name where replica1 is scheduled
         shell: source ~/.profile; kubectl get po -n {{ namespace }} -o wide | grep "{{ pv_name.stdout }}" | grep rep | awk '{print $7}' | awk 'FNR == 1 {print}'
         args:
           executable: /bin/bash
         register: node1
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Get the node name where replica2 is scheduled
         shell: source ~/.profile; kubectl get po -n {{ namespace }} -o wide | grep "{{ pv_name.stdout }}" | grep rep | awk '{print $7}' | awk 'FNR == 2 {print}'
         args:
           executable: /bin/bash
         register: node2
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name:  Get pod name
         shell: source ~/.profile; kubectl get pods -n {{ namespace }} -o wide | grep "{{ pv_name.stdout }}" | grep rep | grep "{{ node1.stdout }}" | awk '{print $1}'
         args:
           executable: /bin/bash
         register: pod_name
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"




       - name:  Delete the replica on one of the nodes
         shell: source ~/.profile; kubectl delete pod -n {{ namespace }} "{{ pod_name.stdout }}" --grace-period=0 --force
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"


       - name:  Check the available replicas in deployment
         shell: source ~/.profile; kubectl get deploy -n {{ namespace }} | grep "{{ pv_name.stdout }}" | grep rep | awk '{print $5}'
         args:
           executable: /bin/bash
         register: available_pods
         until: "'2' in available_pods.stdout"
         delay: 30
         retries: 5
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"


       - name:  Check if the replica is scheduled again
         shell: source ~/.profile; kubectl get pods -n {{ namespace }} -o wide | grep "{{ pv_name.stdout }}" | grep rep | grep Running | grep "{{ node1.stdout }}"
         args:
           executable: /bin/bash
         register: result
         until: "'Running' in result.stdout"
         delay: 30
         retries: 15
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"


       - name: Test playbook passed
         set_fact:
           flag: "Test Passed"

     rescue:
       - name: Test playbook failed
         set_fact:
           flag: "Test Failed"

     always:
       - block:

           - include: cleanup.yml
             when: clean | bool

           - name: Test Cleanup Passed
             set_fact:
               cflag: "Cleanup Passed"

         rescue:
           - name: Test Cleanup Failed
             set_fact:
               cflag: "Cleanup Failed"

         always:

           - name: Terminate the log aggregator
             shell: source ~/.profile; killall stern
             args:
               executable: /bin/bash
             delegate_to: "{{groups['kubernetes-kubemasters'].0}}"


           - name: Send slack notification
             slack:
               token: "{{ lookup('env','SLACK_TOKEN') }}"
               msg: '{{ ansible_date_time.time }} TEST: {{test_name}}, RESULT: {{ flag }}'
             when: slack_notify | bool and lookup('env','SLACK_TOKEN')

