---
- hosts: openebs-mayamaster
  
  vars_files:
    - variables/vars.yml #Import variables from external file.

  tasks:
    - name: Set flag
      set_fact:
        flag: "Succeeded"

    - name: apt-get update packages      
      apt:
        update_cache: yes
      become: true
      register: result
      ignore_errors: yes
    
    - name: Set flag
      set_fact: 
        flag: "failed"
      when: result|failed
    
    - name: Install unzip, curl and wget
      apt: 
        name: "{{ item }}" 
        state: present
      with_items: "{{ deb_packages }}"
      become: true
      register: result
      ignore_errors: yes

    - name: Set flag
      set_fact: 
        flag: "failed"
      when: result|failed

    - name: Create Directory
      file:
        path: /home/{{ hostvars['maya-master']['ansible_ssh_user'] }}/demo/openebs/
        state: directory
      become: true
      register: result
      ignore_errors: yes

    - name: Set flag
      set_fact: 
        flag: "failed"
      when: result|failed

    - name: Download Maya
      get_url:
        url: "{{ item }}"
        dest:  /home/{{ hostvars['maya-master']['ansible_ssh_user'] }}/demo/openebs/
        force: yes
      register: result
      until:  "'OK' in result.msg"
      delay: 5
      retries: 3
      with_items: "{{ openebs_maya_url }}"
      become: true
      ignore_errors: yes

    - name: Set flag
      set_fact: 
        flag: "failed"
      when: result|failed

    - name: Unzip Maya
      unarchive:
        src: /home/{{ hostvars['maya-master']['ansible_ssh_user'] }}/demo/openebs/maya-linux_amd64.zip
        dest: /usr/bin/
        remote_src: True
      become: true
      register: result  
      ignore_errors: yes

    - name: Set flag
      set_fact: 
        flag: "failed"
      when: result|failed

    - name: Setup Maya      
      command: maya setup-omm -self-ip="{{ hostvars['maya-master']['ansible_ssh_host'] }}"
      register: result
      ignore_errors: yes
      

    - name: Set flag
      set_fact: 
        flag: "failed"
      when: result|failed

    - name: Update Nomad IP in .profile
      when: is_vagrant | bool
      lineinfile:
        destfile : /home/{{ hostvars['maya-master']['ansible_ssh_user'] }}/.profile
        line: export NOMAD_ADDR=http://{{ hostvars['maya-master']['ansible_ssh_host'] }}:4646
        state: present      
      register: result
      
      ignore_errors: yes

    - name: Set flag
      set_fact: 
        flag: "failed"
      when: result|failed

    - name: Update M-APIServer IP in .profile
      when: is_vagrant | bool
      lineinfile:
        destfile : /home/{{ hostvars['maya-master']['ansible_ssh_user'] }}/.profile
        line: export MAPI_ADDR=http://{{ hostvars['maya-master']['ansible_ssh_host'] }}:5656
        state: present      
      register: result      
      ignore_errors: yes

    - name: Set flag
      set_fact: 
        flag: "failed"
      when: result|failed

    - name: Results
      fail: 
        msg: "The tests have failed because of errors."
      when: flag == "failed"

- hosts: openebs-mayahosts
  
  vars_files:
    - variables/vars.yml #Import variables from external file.

  tasks:
    - name: Set flag
      set_fact:
        flag: "Succeeded"

    - name: apt-get update packages      
      apt:
        update_cache: yes
      become: true
      register: result
      ignore_errors: yes
    
    - name: Set flag
      set_fact: 
        flag: "failed"
      when: result|failed
    
    - name: Install unzip, curl and wget
      apt: 
        name: "{{ item }}" 
        state: present
      with_items: "{{ deb_packages }}"
      become: true
      register: result
      ignore_errors: yes

    - name: Set flag
      set_fact: 
        flag: "failed"
      when: result|failed

    - name: Create Directory
      file:
        path: /home/{{ hostvars[inventory_hostname]['ansible_ssh_user'] }}/demo/openebs/
        state: directory
      register: result
      ignore_errors: yes

    - name: Set flag
      set_fact: 
        flag: "failed"
      when: result|failed

    - name: Download Maya
      get_url:
        url: "{{ item }}"
        dest:  /home/{{ hostvars[inventory_hostname]['ansible_ssh_user'] }}/demo/openebs/
        force: yes
      register: result
      until:  "'OK' in result.msg"
      delay: 5
      retries: 3
      with_items: "{{ openebs_maya_url }}"
      ignore_errors: yes

    - name: Set flag
      set_fact: 
        flag: "failed"
      when: result|failed

    - name: Unzip Maya
      unarchive:
        src: /home/{{ hostvars[inventory_hostname]['ansible_ssh_user'] }}/demo/openebs/maya-linux_amd64.zip
        dest: /usr/bin/
        remote_src: True
      become: true
      register: result  
      ignore_errors: yes

    - name: Set flag
      set_fact: 
        flag: "failed"
      when: result|failed

    - name: Setup Maya
      command: maya setup-osh -self-ip="{{ hostvars[inventory_hostname]['ansible_ssh_host'] }}" -omm-ips="{{ hostvars['maya-master']['ansible_ssh_host'] }}"
      register: result
      ignore_errors: yes      

    - name: Set flag
      set_fact: 
        flag: "failed"
      when: result|failed

    - name: Update Nomad IP in .profile
      when: is_vagrant | bool
      lineinfile:
        destfile : /home/{{ hostvars[inventory_hostname]['ansible_ssh_user'] }}/.profile
        line: export NOMAD_ADDR=http://{{ hostvars['maya-master']['ansible_ssh_host'] }}:4646
        state: present
      register: result      
      ignore_errors: yes

    - name: Set flag
      set_fact: 
        flag: "failed"
      when: result|failed

    - name: Update M-APIServer IP in .profile
      when: is_vagrant | bool
      lineinfile:
        destfile : /home/{{ hostvars[inventory_hostname]['ansible_ssh_user'] }}/.profile
        line: export MAPI_ADDR=http://{{ hostvars['maya-master']['ansible_ssh_host'] }}:5656
        state: present      
      register: result      
      ignore_errors: yes

    - name: Set flag
      set_fact: 
        flag: "failed"
      when: result|failed

    - name: Results
      fail: 
        msg: "The tests have failed because of errors."
      when: flag == "failed"
