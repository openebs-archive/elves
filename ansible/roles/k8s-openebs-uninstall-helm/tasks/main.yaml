---

# Steps 

#1) Find out the openebs chart name.
#2) Uninstall openebs.
#3) Verify if openebs is uninstalled succeffully.
#4) Delete the namespace.
#5) Uninstall helm.
#6) Delete the resources.
#7) Delete the test artifacts.

- name: Getting OpenEBS chart name
  shell: helm ls --all | grep openebs | grep DEPLOYED | awk '{print $1}'
  args:
    executable: /bin/bash
  register: charts

- name: Uninstall OpenEBS
  shell: helm del --purge "{{charts.stdout}}"
  args:
    executable: /bin/bash
  register: purge_out
  until: "'deleted' in purge_out.stdout"
  delay: 60
  retries: 10

- name: Checking if provisioner and api server are deleted.
  shell: kubectl get po -n "{{ namespace }}" 
  args: 
    executable: /bin/bash
  register: pod
  until: "'apiserver' and 'provisioner' not in pod.stdout"
  delay: 60
  retries: 15

- name: Uninstalling helm
  shell: helm reset
  args:
    executable: /bin/bash
  register: helm_out
  until: "'Tiller' and 'uninstalled' in helm_out.stdout"
  delay: 60
  retries: 10

- name: Checking if tiller has been uninstalled successfully
  shell: kubectl get po -n "{{ k8s_namespace }}"
  args:
    executable: /bin/bash
  register: pods
  until: "'tiller-deploy' not in pods.stdout"
  delay: 60
  retries: 10

- name: Deleting service account
  shell: kubectl delete sa tiller -n "{{ k8s_namespace }}"
  args:
    executable: /bin/bash
  register: sa
  until: "'deleted' in sa.stdout"
  delay: 60
  retries: 5

- name: Deleting clusterolebinding
  shell: kubectl delete clusterrolebinding tiller
  args:
    executable: /bin/bash
  register: crd
  until: "'deleted' in crd.stdout"
  delay: 30
  retries: 5

- name: Deleting the namespace
  shell: kubectl delete ns "{{ namespace }}"
  args:
    executable: /bin/bash
  register: ns_out
  until: "'deleted' in ns_out.stdout"
  delay: 20
  retries: 10

- name: Get $HOME of K8s master for kubernetes user
  shell: source ~/.profile; echo $HOME
  args:
    executable: /bin/bash
  register: result_kube_home
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  changed_when: true

- name: Deleting the patch yaml file copied to k8s master.
  file:
    path: "{{ result_kube_home.stdout }}/{{ patch_file }}"
    state: absent

- name: Deleting the storage classes
  shell: kubectl delete -f "{{ storage_classes }}"
  args:
    executable: /bin/bash
  

